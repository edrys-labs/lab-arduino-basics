id: Msw5YCj3DZza09sjus6waPbUQO721rmpCxZlDqRN
createdBy: Mj92OSQdrbcE
dateCreated: 1689064662293
name: Arduino - Blink
meta:
  logo: >-
    https://repository-images.githubusercontent.com/487803615/83e1b148-5e81-4733-8ffc-e9ac5340547e
  description: >-
    Basic Arduino Blink example. If you run this in station mode you need to run a terminal server locally:
    Make sure that one participant shares a pytermjs session
    directly or from a docker file as described
    <a href="https://github.com/Cross-Lab-Project/edrys_module-pyxtermjs">here</a>
    or run:

    <br><br>

    <code>docker run -it -p 5000:5000 crosslab/edrys_pyxtermjs_arduino --device=/dev/ttyACM0:/dev/ttyACM0</code>
  selfAssign: true
  defaultNumberOfRooms: 0
  id: 79sFHo6ONB1S25cTN7emXmOibQ2HNWb2G9X3Xn2x
members:
  teacher: []
  student: []
modules:
  - url: https://cross-lab-project.github.io/edrys_module-markdown-it/index.html
    config: >
      # Welcome to the Edrys - PyTermJS


      With the help of the edrys module

      [PyTermJS](https://github.com/Cross-Lab-Project/edrys_module-pyxtermjs)

      it is possible to share a terminal-session for different purposes with
      your peers.

      Therefore one will have start either PyTermJS directly on your computer,

      or you can run some of our docker containers directly.

      Thus, you will have to install Python or [Docker](#docker) at least on one
      machine that runs in station mode.


      ``` yaml

       $ docker run -it -p 5000:5000 crosslab/edrys_pyxtermjs

      ```


      To start an entire development environment with gcc, java, haskell,
      nodejs, etc.

      run the following command


      ``` bash

      $ docker run -it -p 5000:5000 crosslab/edrys_pyxtermjs_development

      ```


      In case you want to run an Arduino environment execute the following, it
      comes

      with an

      [arduino-cli](https://arduino.github.io/arduino-cli/0.35/),

      some base libraries and support for arduino avr and megaavr.

      For more information checkout the

      [Dockerfile](https://github.com/Cross-Lab-Project/edrys_module-pyxtermjs/blob/master/docker/arduino/Dockerfile).


      ``` bash
       $ docker run -it -p 5000:5000 crosslab/edrys_pyxtermjs_arduino \
          --device=/dev/ttyACM0:/dev/ttyACM0 \
          --device-cgroup-rule='c 166:* rmv' \
          --device-cgroup-rule='c 189:* rmv'
      ```


      ## Open a station

      If you own this course, simply open the settings by clicking onto the
      gear-symbol, switch to "station" settings and open or share the link.

      Otherwise simply copy the entire url and replace `classroom` by `station`
      ...


      Afterwards a new station will appear on the navigation bar on the left.
      Click on it and you will be redirected to the station.

      ## Docker


      Docker is an open platform for developing, shipping, and running
      applications that separates applications from infrastructure to enable
      quick software delivery.


      [Installation](https://docs.docker.com/engine/install/)


      ### Short Introduction


      <iframe width="560" height="315"
      src="https://www.youtube.com/embed/Gjnup-PuquQ?si=FWcDvC369Qim9q7c"
      title="YouTube video player" frameborder="0" allow="accelerometer;
      autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture;
      web-share" allowfullscreen></iframe>
    studentConfig: ''
    teacherConfig: ''
    stationConfig: ''
    showInCustom: lobby
    width: full
    height: huge
  - url: https://cross-lab-project.github.io/edrys_module-pyxtermjs/index.html
    config: ''
    studentConfig: ''
    teacherConfig: ''
    stationConfig:
      server: http://localhost:5000/pty
      enable:
        teacher: true
        student: true
    showInCustom: station
    width: full
    height: medium
  - url: https://cross-lab-project.github.io/edrys_module-editor/index.html
    config:
      editorText: |
        /*
          Blink

          Turns an LED on for one second, then off for one second, repeatedly.

          Most Arduinos have an on-board LED you can control. On the UNO, MEGA and ZERO
          it is attached to digital pin 13, on MKR1000 on pin 6. LED_BUILTIN is set to
          the correct LED pin independent of which board is used.
          If you want to know what pin the on-board LED is connected to on your Arduino
          model, check the Technical Specs of your board at:
          https://www.arduino.cc/en/Main/Products

          This example code is in the public domain.

          https://www.arduino.cc/en/Tutorial/BuiltInExamples/Blink
        */

        // the setup function runs once when you press reset or power the board
        void setup() {
          // initialize digital pin LED_BUILTIN as an output.
          pinMode(LED_BUILTIN, OUTPUT);

          // initialize serial output
          Serial.begin(9600);
          Serial.println("Hello Mom");
        }

        // the loop function runs over and over again forever
        void loop() {
          digitalWrite(LED_BUILTIN, HIGH);   // turn the LED on (HIGH is the voltage level)
          Serial.println("LED HIGH")
          delay(1000);                       // wait for a second
          digitalWrite(LED_BUILTIN, LOW);    // turn the LED off by making the voltage LOW
          Serial.println("LED LOW")
          delay(1000);                       // wait for a second
        }
      runCommand: execute
      language: cpp
      theme: light
    showInCustom: station
    width: full
    height: huge
  - url: https://cross-lab-project.github.io/edrys_module-station-stream/index.html
    stationConfig:
      video: true
      audio: false
    showInCustom: station
    width: half
    height: medium
  - url: https://cross-lab-project.github.io/edrys_module-pyxtermjs/index.html
    stationConfig:
      server: http://localhost:5000/pty
      execute: execute
      script: >
        echo $CODE | base64 --decode > Blink.ino

        arduino-cli sketch new Blink

        olddir=$(pwd)

        mv Blink.ino Blink

        cd Blink

        arduino-cli board attach -p /dev/ttyACM0 -b arduino:avr:uno

        cd $olddir

        arduino-cli compile Blink && arduino-cli upload -p /dev/ttyACM0 Blink &&
        arduino-cli monitor -p /dev/ttyACM0
      enable:
        teacher: true
        student: true
    showInCustom: station
    width: half
    height: medium
  - url: >-
      https://raw.githubusercontent.com/cross-lab-project/edrys_module-markdown-it/2.0.0/index.html
    config: >-

      # Arduino-Blink Example

      Try out different delays and observe the behavoir on the Arduino-board.

      The terminal is a fully functional terminal you can use it to run commands
      manually.


      * Hit <kbd>Ctrl</kbd>-<kbd>C</kbd> to stop the serial output manually.
      * Use command `clear` to clear the termial
      * or `exit` to restart the server
      * have fun ;-)


      ### Original Code


      ``` cpp

      /*
        Blink

        Turns an LED on for one second, then off for one second, repeatedly.

        Most Arduinos have an on-board LED you can control. On the UNO, MEGA and ZERO
        it is attached to digital pin 13, on MKR1000 on pin 6. LED_BUILTIN is set to
        the correct LED pin independent of which board is used.
        If you want to know what pin the on-board LED is connected to on your Arduino
        model, check the Technical Specs of your board at:
        https://www.arduino.cc/en/Main/Products

        This example code is in the public domain.

        https://www.arduino.cc/en/Tutorial/BuiltInExamples/Blink
      */

      // the setup function runs once when you press reset or power the board
      void setup() {
        // initialize digital pin LED_BUILTIN as an output.
        pinMode(LED_BUILTIN, OUTPUT);

        // initialize serial output
        Serial.begin(9600);
        Serial.println("Hello Mom");
      }

      // the loop function runs over and over again forever
      void loop() {
        digitalWrite(LED_BUILTIN, HIGH);   // turn the LED on (HIGH is the voltage level)
        Serial.println("LED HIGH")
        delay(1000);                       // wait for a second
        digitalWrite(LED_BUILTIN, LOW);    // turn the LED off by making the voltage LOW
        Serial.println("LED LOW")
        delay(1000);                       // wait for a second
      }

      ```
    studentConfig: ''
    teacherConfig: ''
    stationConfig: ''
    showInCustom: station
    width: full
    height: medium
